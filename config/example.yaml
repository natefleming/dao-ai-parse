
# yaml-language-server: $schema=../../schemas/model_config_schema.json

schemas:
  dao_schema: &dao_schema
    catalog_name: nfleming                    # Unity Catalog name
    schema_name: example                    # Schema within the catalog

resources:

  llms:

    tool_calling_llm: &tool_calling_llm
      name: databricks-meta-llama-3-3-70b-instruct  

    fast_llm: &fast_llm
      name: databricks-meta-llama-3-1-8b-instruct  

    judge_llm: &judge_llm
      name: databricks-claude-3-7-sonnet
      temperature: 0.5                             
      max_tokens: 8192

    embedding_model: &embedding_model
      name: databricks-gte-large-en                 # Text embedding model

  vector_stores:

    documents_vector_store: &documents_vector_store
      embedding_model: *embedding_model             # Reference to embedding model above
      endpoint:                                     # Vector search endpoint configuration
        name: dbdemos_vs_endpoint                   # Databricks vector search endpoint
        type: STANDARD                              # Endpoint type (STANDARD or OPTIMIZED_STORAGE)
      index:                                        # Vector search index configuration
        schema: *dao_schema                   # Unity Catalog schema for the index
        name: documents_index                       # Index name
      source_table:                                 # Table containing source data
          schema: *dao_schema
          name: documents
      source_path:
        volume:
          schema: *dao_schema
          name: documents
      checkpoint_path:
        volume:
          schema: *dao_schema
          name: checkpoints
      embedding_source_column: source               # Column to create embeddings from
      primary_key: id                               # Primary key column
      doc_uri: source                               # Optional document URI column (null in this case)
      columns:                                      # Columns to include in vector store
        - source
        - mime_type

  genie_rooms:
    example_genie_room: &example_genie_room
      name: "Example Genie Room"                  # Human-readable name
      space_id: 01f01c91f1f414d59daaefd2b7ec82ea    # Databricks Genie space ID


retrievers:
  documents_retriever: &documents_retriever
    vector_store: *documents_vector_store           # Reference to vector store defined above
    columns:                                        # Columns to return in search results
      - source
    search_parameters:                              # Search configuration
      num_results: 10                               # Maximum number of results to return
      filters: {}                                   # Additional filters (empty in this case)
      query_type: HYBRID    

tools:
  genie_tool: &genie_tool
    name: genie
    function:
      type: factory                                 # Tool type: factory function
      name: dao_ai.tools.create_genie_tool          # Factory function path
      args:                                         # Arguments passed to factory
        name: example_genie_tool
        description: My Answers questions about genie
        genie_room: *example_genie_room              # Reference to Genie room config

  vector_search_tool: &vector_search_tool
    name: vector_search
    function:
      type: factory
      name: dao_ai.tools.create_vector_search_tool
      args:
        retriever: *documents_retriever              # Reference to retriever config
        name: vector_search_tool                     # Tool instance name
        description: "Search PDF documents"              # Tool description

agents:
  genie_agent: &genie_agent
    name: genie_agent                               # Agent identifier
    model: *tool_calling_llm                        # Reference to LLM configuration
    tools:                                          # Tools available to this agent
      - *genie_tool
    prompt: |                                       # System prompt defining agent behavior
      Answers questions about foo
    handoff_prompt: |                               # Conditions for routing to this agent
      Answers all foo questions

  vector_search_agent: &vector_search_agent
    name: vector_search_agent                       # Agent identifier
    model: *tool_calling_llm                        # Reference to LLM configuration
    tools:                                          # Tools available to this agent
      - *vector_search_tool
    prompt: |                                       # System prompt defining agent behavior
      Answers questions about bar
    handoff_prompt: |                               # Conditions for routing to this agent
      Answers all bar questions

app:
  name: example_agent                             # Application name  
  log_level: DEBUG                                   # Logging level for the application
  registered_model:                                 # MLflow registered model configuration
    schema: *dao_schema                       # Schema where model will be registered
    name: example_agent                           # Model name in MLflow registry
  agents:                                           # List of agents included in the system
    - *genie_agent                                  # Order management agent
    - *vector_search_agent                          # Vector search agent
  orchestration:                                    # Agent orchestration configuration
    supervisor:                                     # Supervisor orchestration pattern
      model: *fast_llm                              # LLM for routing decisions


evaluation:
  model: *judge_llm
  table:
    schema: *dao_schema
    name: evaluation
  num_evals: 25
  custom_inputs:
    configurable:
      thread_id: "1"
